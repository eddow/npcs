// Advanced MiniScript features demonstration
print "=== Advanced MiniScript Features Demo ==="

// Import system
import "advanced"
print "Imported advanced module"

// Type checking with isa
data = [42, "hello", true, {name: "Alice", age: 30}, [1, 2, 3]]

print "\n=== Type Checking ==="
for item in data
	if item isa number then
		print "Number: " + item
	else if item isa string then
		print "String: " + item
	else if item isa boolean then
		print "Boolean: " + item
	else if item isa map then
		print "Map: " + item.name + " (age: " + item.age + ")"
	else if item isa list then
		print "List with " + item.len + " items"
	end if
end for

// Logical expressions with type checking
print "\n=== Logical Expressions ==="
person = {name: "Bob", age: 25, active: true}
if person isa map and person.age isa number and person.age > 18 then
	print "Person is an adult: " + person.name
end if

if person.active isa boolean and not (person.active == false) then
	print "Person is active"
end if

// For loops with continue and break
print "\n=== For Loops with Control Flow ==="
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenSum = 0
for num in numbers
	if num % 2 != 0 then
		continue
	end if
	if num > 8 then
		break
	end if
	evenSum = evenSum + num
	print "  Added " + num + " to even sum"
end for
print "Sum of even numbers (2,4,6,8): " + evenSum

// Complex nested loops with type checking
print "\n=== Nested Loops with Type Checking ==="
matrix = [[1, "two", 3], ["four", 5, "six"], [7, 8, 9]]

for row in matrix
	rowSum = 0
	rowStr = ""
	for cell in row
		if cell isa number then
			rowSum = rowSum + cell
			rowStr = rowStr + cell + " "
		else if cell isa string then
			rowStr = rowStr + cell + " "
		end if
	end for
	print "Row: " + rowStr + "(sum: " + rowSum + ")"
end for

// Function with type validation
print "\n=== Function with Type Validation ==="
processData = function(data)
	if data isa number then
		return "Number: " + data
	else if data isa string then
		return "String: " + data
	else if data isa boolean then
		return "Boolean: " + data
	else if data isa map then
		return "Map with keys: " + data.keys
	else if data isa list then
		return "List with " + data.len + " items"
	else
		return "Unknown type"
	end if
end function

// Test the function
testData = [42, "hello", true, {a: 1}, [1, 2, 3]]
for item in testData
	result = processData(item)
	print "  " + result
end for

// Complex logical expressions
print "\n=== Complex Logical Expressions ==="
x = 15
y = 25
name = "Charlie"
isValid = true

complexCondition = (x > 10 and y > 20) or (name == "Charlie" and isValid)
print "Complex condition: " + complexCondition

if not (x < 10 or y < 20) and (name isa string and name.length > 0) then
	print "All conditions met!"
end if

// Unary expressions in complex scenarios
print "\n=== Unary Expressions ==="
values = [10, -5, 0, 15, -20]
positiveCount = 0
for val in values
	if not (val < 0) then
		positiveCount = positiveCount + 1
	end if
end for
print "Positive values count: " + positiveCount

// Final demonstration
print "\n=== Final Demo ==="
if (x isa number and y isa number) and (x > 0 and y > 0) then
	sum = x + y
	if not (sum < 0) then
		print "Sum of " + x + " and " + y + " is " + sum
	end if
end if

print "\n=== Advanced Features Demo Completed! ==="
