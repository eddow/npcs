{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "NPCS",
  "scopeName": "source.npcs",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#function-calls"
    },
    {
      "include": "#function-definitions"
    },
    {
      "include": "#assignment-statements"
    },
    {
      "include": "#yielding-statements"
    },
    {
      "include": "#objects"
    },
    {
      "include": "#arrays"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
          "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
          "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "statements": {
      "patterns": [
        {
          "name": "meta.statement.npcs",
          "match": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*|\\[[^\\]]+\\])*)\\s+(.+)$",
          "captures": {
            "1": { "name": "entity.name.function.statement.npcs" },
            "2": { "name": "meta.statement.arguments.npcs" }
          }
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|then|else|end if|while|end while|for|in|end for|break|continue|return)\\b"
        },
        {
          "name": "storage.type.function",
          "match": "\\b(function|end function)\\b"
        },
        {
          "name": "keyword.operator.word",
          "match": "\\b(isa|not)\\b"
        },
        {
          "name": "constant.language.boolean",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null",
          "match": "\\b(null|undefined)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\+|-|\\*|/|%|\\^"
        },
        {
          "name": "keyword.operator.comparison",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.logical",
          "match": "\\band\\b|\\bor\\b"
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "variable.function",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*|\\[[^\\]]+\\])*\\s*(?=\\()"
        }
      ]
    },
    "function-definitions": {
      "patterns": [
        {
          "name": "meta.function",
          "match": "^\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)\\s*(function)\\b",
          "captures": {
            "1": { "name": "entity.name.function" },
            "2": { "name": "keyword.operator.assignment" },
            "3": { "name": "storage.type.function" }
          }
        }
      ]
    },
    "assignment-statements": {
      "patterns": [
        {
          "name": "meta.assignment",
          "match": "^\\s*(?!(?:if|then|else|end if|while|end while|for|in|end for|function|end function|return|break|continue)\\b)([a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*|\\[[^\\]]+\\])*)\\s*(=)",
          "captures": {
            "1": { "name": "variable.other" },
            "2": { "name": "keyword.operator.assignment" }
          }
        }
      ]
    },
    "yielding-statements": {
      "patterns": [
        {
          "name": "meta.statement",
          "begin": "^\\s*([A-Za-z_][A-Za-z0-9_]*(?:\\.[A-Za-z_][A-Za-z0-9_]*|\\[[^\\]]+\\])*)\\s+",
          "beginCaptures": {
            "1": { "name": "variable.function" }
          },
          "end": "$",
          "patterns": [
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#objects" },
            { "include": "#arrays" },
            { "name": "punctuation.separator", "match": "," }
          ]
        }
      ]
    },
    "objects": {
      "patterns": [
        {
          "name": "meta.object",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#objects"
            },
            {
              "include": "#arrays"
            },
            { "name": "punctuation.separator.key-value", "match": ":" },
            { "name": "punctuation.separator.dictionary", "match": "," }
          ]
        }
      ]
    },
    "arrays": {
      "patterns": [
        {
          "name": "meta.array",
          "begin": "\\[",
          "end": "\\]",
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#objects"
            },
            {
              "include": "#arrays"
            },
            { "name": "punctuation.separator.array", "match": "," }
          ]
        }
      ]
    }
  }
}